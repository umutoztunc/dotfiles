" Plugins {{{
" Use vim-plug to manage.
call plug#begin('~/.vim/plugged')

" Status line {{{
Plug 'vim-airline/vim-airline'
" }}}

" Color theme {{{
Plug 'morhetz/gruvbox'
" }}}

" Syntax highlight {{{
Plug 'sheerun/vim-polyglot'

" Smali syntax highlight
Plug 'kelwin/vim-smali'

" Log file highlight
Plug 'mtdl9/vim-log-highlighting'
" }}}

" Indent line {{{
Plug 'Yggdroot/indentLine'
" }}}

" Fast comment {{{
Plug 'preservim/nerdcommenter'
" }}}

" File navigator {{{
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
" }}}

" Language Server {{{
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" }}}

" Async run {{{
Plug 'skywind3000/asyncrun.vim'
" }}}

call plug#end()
" }}}

" gruvbox {{{
let g:gruvbox_italic = 0
"}}}

" vim-airline {{{
let g:airline_powerline_fonts = 1
let g:airline_theme = 'gruvbox'
" }}}

" vim-polyglot {{{
let g:vim_markdown_conceal = 0
let g:vim_markdown_conceal_code_blocks = 0
" }}}

" NERDCommenter {{{
" Add spaces after comment delimiters by default.
let g:NERDSpaceDelims = 1

" Align line-wise comment delimiters flush left instead of following code indentation.
let g:NERDDefaultAlign = 'left'
" }}}

" AsyncRun {{{
" Automatically open quickfix window when AsyncRun command is executed.
" Set the quickfix window 12 lines length.
let g:asyncrun_open = 12
" }}}

" Language Server {{{
let g:coc_global_extensions = ['coc-clangd', 'coc-pyright', 'coc-rust-analyzer', 'coc-solargraph', 'coc-pairs']

" Use <C-Space> to trigger completion.
inoremap <silent> <expr> <C-@> coc#refresh()

" Use tab for trigger completion with characters ahead and navigate.
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>n <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f <Plug>(coc-format-selected)
nmap <leader>f <Plug>(coc-format-selected)

" Show documentation in preview window.
nnoremap <silent> K :call CocActionAsync('doHover')<CR>

" GoTo code navigation
nmap <silent> <leader>d <Plug>(coc-definition)
nmap <silent> <leader>t <Plug>(coc-type-definition)
nmap <silent> <leader>i <Plug>(coc-implementation)
nmap <silent> <leader>x <Plug>(coc-references)

" Navigate diagnostics.
nmap <silent> <leader>[ <Plug>(coc-diagnostic-prev)
nmap <silent> <leader>] <Plug>(coc-diagnostic-next)
" }}}

syntax on
set encoding=utf-8
set number
set relativenumber
set cursorline
set foldmethod=marker
set wildmenu
set signcolumn=yes
set mouse=a
set clipboard=unnamed

set linebreak       " don't break at words
set breakindent     " keep the indent for wrapped lines
let &showbreak='↪ ' " to be shown at start of wrapped lines
set list            " show invisible chars
set listchars=space:·,tab:→\ ,

set autoindent
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set smarttab

set incsearch
set ignorecase
set smartcase
set hlsearch
nnoremap <silent> <ESC> <ESC>:nohlsearch<CR>

set autoread
set backspace=indent,eol,start
set encoding=utf-8
set pastetoggle=<F2>

set splitbelow      " new window at bottom
set splitright      " new window on the right

set termguicolors
set background=dark
colorscheme gruvbox

let mapleader="\<Space>"

autocmd FileType c,cpp,objc set cindent
autocmd FileType c,objc set shiftwidth=8 tabstop=8 softtabstop=8 noexpandtab
autocmd FileType python set shiftwidth=4 tabstop=4 softtabstop=4
autocmd FileType rst set shiftwidth=3 tabstop=3 softtabstop=3

autocmd FileType cpp nnoremap <silent> <F5> :AsyncRun -save=1 g++ -std=c++20 -Wall -Wshadow -g -fsanitize=address -fsanitize=undefined -D_GLIBCXX_DEBUG % -o %:r<CR>
autocmd FileType cpp nnoremap <silent> <F9> :AsyncRun -save=1 g++ -std=c++20 -Wall -Wshadow -O2 % -o %:r<CR>
autocmd BufRead,BufNewFile *.sb set filetype=scheme expandtab tabstop=2 lisp
nnoremap <silent> <F10> :call asyncrun#quickfix_toggle(12)<CR>


" Reindent all code, while preserving cursor location.
nnoremap <Leader>= mqHmwgg=G`wzt`q
